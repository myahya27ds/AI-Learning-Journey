# -*- coding: utf-8 -*-
"""MP Word Counter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_hOpHrV9oNooFEDlY8bqa7AeGhlYzae
"""

import pandas as pd
import string
import json

# Define a basic list of English and Indonesian stopwords
english_stopwords = set([
    "a", "an", "the", "is", "it", "of", "and", "or", "in", "to", "be", "that",
    "this", "with", "as", "for", "by", "on", "at", "from", "but", "not", "your", "you"
])

indonesian_stopwords = set([
    "yang", "untuk", "pada", "atau", "dan", "di", "dari", "dengan", "ini", "itu",
    "adalah", "tidak", "bukan", "akan", "sudah", "telah", "sedang", "masih", "justru",
    "hanya", "saja", "pun", "bahkan", "pula", "lagi", "begitu", "demikian", "seperti",
    "yaitu", "yakni", "ialah", "adanya", "agar", "supaya", "guna", "bagi", "buat",
    "ketika", "saat", "kala", "sementara", "sembari", "hingga", "sampai", "selagi",
    "selama", "sambil", "sebelum", "sesudah", "setelah", "seusai", "andaikata",
    "seandainya", "umpamanya", "sekiranya", "jika", "kalau", "jikalau", "apabila",
    "andaikan", "asalkan", "biarpun", "meskipun", "sekalipun", "sungguhpun", "walaupun",
    "kendatipun", "andaikan", "asal", "sebab", "karena", "oleh", "karenanya", "lantaran",
    "akibat", "sehingga", "sampai", "maka", "dengan", "cara", "melalui", "menurut",
    "menurutnya", "kata", "katanya", "demi", "kecuali", "selain", "bahkan", "apalagi",
    "tambahan", "lagipula", "misalnya", "umpamanya", "contohnya", "ibarat", "bak",
    "daripada", "daripada", "jika", "kalau", "jikalau", "apabila", "andaikan",
    "asalkan", "biarpun", "meskipun", "sekalipun", "sungguhpun", "walaupun",
    "kendatipun", "andaikan", "asal", "sebab", "karena", "oleh", "karenanya", "lantaran",
    "akibat", "sehingga", "sampai", "maka", "dengan", "cara", "melalui", "menurut",
    "menurutnya", "kata", "katanya", "demi", "kecuali", "selain", "bahkan", "apalagi",
    "tambahan", "lagipula", "misalnya", "umpamanya", "contohnya", "ibarat", "bak",
    "daripada", "daripada", "saya", "kamu", "dia", "beliau", "mereka", "kita", "kami",
    "aku", "kau", "beliau", "mereka", "nya", "mu", "ku", "engkau"
])


def clean_text(text):
  """
  Converts input text to lowercase and removes punctuation.

  Args:
    text: The input string.

  Returns:
    The cleaned string with lowercase letters and no punctuation.
  """
  text = text.lower()
  cleaned_text = ''.join(char for char in text if char not in string.punctuation)
  return cleaned_text

def count_characters(text):
  """
  Counts the total number of characters and the number of characters excluding spaces.

  Args:
    text: The input string.

  Returns:
    A tuple containing:
      - total_chars: The total character count.
      - chars_without_spaces: The character count without spaces.
  """
  total_chars = len(text)
  chars_without_spaces = len(text.replace(" ", ""))
  return total_chars, chars_without_spaces

def count_words(text, ignore_stopwords=False, language='english'):
  """
  Counts the total number of words and calculates the frequency of each word.
  Can optionally ignore stopwords based on the specified language.

  Args:
    text: The cleaned input string.
    ignore_stopwords: Boolean indicating whether to exclude stopwords from the count and frequency. Defaults to False.
    language: The language of the text ('english' or 'indonesian'). Defaults to 'english'.

  Returns:
    A tuple containing:
      - total_word_count: The total number of words (after optional stopword removal).
      - word_frequency: A dictionary where keys are words and values are their frequencies.
  """
  words = text.split()
  if ignore_stopwords:
      if language == 'english':
          words = [word for word in words if word not in english_stopwords and word]
      elif language == 'indonesian':
          words = [word for word in words if word not in indonesian_stopwords and word]
  total_word_count = len(words)
  word_frequency = {}
  for word in words:
    word_frequency[word] = word_frequency.get(word, 0) + 1
  return total_word_count, word_frequency

def count_vowels_consonants(text):
  """
  Counts the number of vowels and consonants in a string, ignoring non-alphabetic characters.

  Args:
    text: The input string.

  Returns:
    A tuple containing:
      - vowel_count: The number of vowels.
      - consonant_count: The number of consonants.
  """
  vowel_count = 0
  consonant_count = 0
  vowels = "aeiou"

  for char in text:
    if char.isalpha():
      if char in vowels:
        vowel_count += 1
      else:
        consonant_count += 1
  return vowel_count, consonant_count

def top_n_words(word_frequency, n):
  """
  Retrieves the top N most frequent words from a word frequency dictionary.

  Args:
    word_frequency: A dictionary with words as keys and their frequencies as values.
    n: The number of top words to return.

  Returns:
    A list of tuples, where each tuple is (word, frequency),
    sorted in descending order based on frequency.
  """
  sorted_word_frequency = sorted(word_frequency.items(), key=lambda item: item[1], reverse=True)
  return sorted_word_frequency[:n]

def get_user_input():
  """
  Prompts the user to enter text manually or read from a file.

  Returns:
    The user's input text as a string, or None if a file reading error occurred.
  """
  while True:
    choice = input("Enter 'm' for manual input or 'f' to read from a file: ").lower()
    if choice == 'm':
      text = input("Enter your text: ")
      return text
    elif choice == 'f':
      file_path = input("Enter the file path: ")
      try:
        with open(file_path, 'r') as f:
          text = f.read()
        return text
      except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
        return None
      except Exception as e:
        print(f"An error occurred while reading the file: {e}")
        return None
    else:
      print("Invalid choice. Please enter 'm' or 'f'.")

def save_results(results, filename):
    """
    Saves the text analysis results to a specified file.

    Args:
        results: A dictionary containing the analysis results.
        filename: The name of the file to save the results to.
    """
    try:
        with open(filename, 'w') as f:
            # Format the results nicely for the file
            f.write("--- Text Analysis Results ---\n")
            for key, value in results.items():
                if key == "Top N Most Frequent Words":
                    f.write(f"\n{key}:\n")
                    if isinstance(value, list):
                        for word, freq in value:
                            f.write(f"- {word}: {freq}\n")
                else:
                    f.write(f"{key}: {value}\n")
        print(f"Results saved to {filename}")
    except IOError as e:
        print(f"Error saving results to file: {e}")


def main():
  """
  Main function to run the text analysis program.
  Provides a menu for the user to analyze text or exit.
  """
  while True:
    print("\nText Analysis Menu:")
    print("1. Analyze Text")
    print("2. Exit")

    choice = input("Enter your choice (1 or 2): ")

    if choice == '1':
      text = get_user_input()
      if text is not None:
        cleaned_text = clean_text(text)

        if not cleaned_text:
          print("No text to analyze after cleaning.")
          continue

        # Ask user for language
        language_choice = input("Enter language (english/indonesian): ").lower()
        while language_choice not in ['english', 'indonesian']:
            print("Invalid language choice. Please enter 'english' or 'indonesian'.")
            language_choice = input("Enter language (english/indonesian): ").lower()

        # Ask user if they want to ignore stopwords
        ignore_sw_choice = input("Ignore stopwords? (yes/no): ").lower()
        ignore_stopwords_flag = ignore_sw_choice == 'yes'


        total_chars, chars_without_spaces = count_characters(cleaned_text)
        total_word_count, word_frequency = count_words(cleaned_text, ignore_stopwords=ignore_stopwords_flag, language=language_choice)
        vowel_count, consonant_count = count_vowels_consonants(cleaned_text)

        results = {
            "Total Characters": total_chars,
            "Characters without spaces": chars_without_spaces,
            "Total Word Count": total_word_count,
            "Vowel Count": vowel_count,
            "Consonant Count": consonant_count
        }

        print("\n--- Analysis Results ---")
        for key, value in results.items():
            print(f"{key}: {value}")


        if total_word_count > 0:
          while True:
            try:
              n = int(input("Enter the number of top words to display: "))
              if n >= 0:
                break
              else:
                print("Please enter a non-negative number.")
            except ValueError:
              print("Invalid input. Please enter an integer.")

          top_words = top_n_words(word_frequency, n)
          results["Top N Most Frequent Words"] = top_words # Add to results dictionary

          print(f"\nTop {n} Most Frequent Words:")
          for word, frequency in top_words:
            print(f"- {word}: {frequency}")
        else:
            print("No words to analyze for frequency.")

        # Ask user if they want to save results
        save_choice = input("Save results to a file? (yes/no): ").lower()
        if save_choice == 'yes':
            filename = input("Enter filename to save results (e.g., analysis.txt): ")
            save_results(results, filename)


    elif choice == '2':
      print("Exiting program.")
      break
    else:
      print("Invalid choice. Please enter 1 or 2.")

if __name__ == "__main__":
  main()